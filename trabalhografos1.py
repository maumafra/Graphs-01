# -*- coding: utf-8 -*-
"""TrabalhoGrafos1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qy2ohcA3g3dAibXAtv5dTpLZubzYiul3
"""

#Aluno: Maurício Mafra Monnerat

def start(graph):
  if not validateGraph(graph):
    return print("Grafo inválido! Informe uma Matriz de Adjacência não nula e de tamanho N x N!")
  returnMsg = "Este grafo é "
  returnMsg += tipoDoGrafo(graph)
  print(returnMsg)

def validateGraph(graph):
  if not isinstance(graph, list) or len(graph) == 0:
    return False
  size = len(graph)
  for lineIdx in range(size):
    if len(graph[lineIdx]) != size:
      return False
  return True

def tipoDoGrafo(graph):
  graphType = ""
  if checkSymmetry(graph):
    graphType += "provavelmente não-dirigido, "
  else:
    graphType += "dirigido, "
  return graphType

def checkSymmetry(graph):
  for lineIdx in range(len(graph)):
    for elemIdx in range(len(graph[lineIdx])):
      if graph[lineIdx][elemIdx] != graph[elemIdx][lineIdx]:
        return False
  return True

#Defina o grafo aqui:
graph = [
    [0,1,1,1],
    [1,0,0,0],
    [1,0,0,1],
    [1,0,1,0]]

graph1 = 0 #Teste para ver se cai resulta em grafo inválido
graph2 = [] #Teste para ver se cai resulta em grafo inválido

start(graph)